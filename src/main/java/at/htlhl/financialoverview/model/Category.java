package at.htlhl.financialoverview.model;

import jakarta.persistence.*;
import java.util.List;

/**
 * The {@code Category} class represents a category entity in the 'categories' table of the 'financial_overview' PostgreSQL database.
 * It is a POJO (Plain Old Java Object) or entity class that maps to the database table.
 *
 * <p>
 * This class is annotated with the {@link Entity} annotation, indicating that it is an entity class to be managed and persisted in the database.
 * The {@link Table} annotation specifies the name of the table in the database that corresponds to this entity.
 * </p>
 *
 * <p>
 * This class contains several fields representing category properties, such as category name and category description.
 * It also includes many-to-one relationships with the {@link Colour} and {@link User} classes, where a category belongs to a colour and a user.
 * It also has a one-to-many relationship with the {@link Subcategory} class, where a category can have multiple subcategories associated with it.
 * </p>
 *
 * @author Fischer
 * @version 1.6
 * @since 24.07.2023 (version 1.6)
 */

/*
 * <i>@Entity is an annotation used to mark a Java class as an entity class. An entity class represents a table in the database. It typically corresponds to a row in the table and provides a way to interact with the data stored in the table. By applying the annotation you indicate that instances of this class can be managed and persisted in the database.</i>
 * <br>
 * <i>@Table is an annotation used to specify the details of the table associated with an entity class.
 * The 'name' attribute within the annotation specifies the name of the table in the database that corresponds to the entity. In this case, the 'entries' table will be associated with the entity class where this annotation is applied.</i>
 * <br>
 * <i>By combining these two annotations, you are indicating that the Java class is an entity and should be mapped to the specified table name in the database. The JPA implementation will then use this information to perform CRUD (Create, Read, Update, Delete) operations and manage the persistence of instances of this entity class in the database table.</i>
 */
@Entity
@Table(name = "categories")
/*
 * The @SecondaryTable annotation is used to specify a secondary table for an entity in Java Persistence API (JPA). It allows you to map additional columns from a secondary table to the same entity. The name attribute is used to specify the name of the secondary table.
 * In the case of @SecondaryTable(name = "colours", pkJoinColumns = @PrimaryKeyJoinColumn(name = "fk_category_colour_id")), it means that the entity is associated with a secondary table named "colours". The pkJoinColumns attribute is used to specify the primary key join column(s) between the main table and the secondary table. In this case, @PrimaryKeyJoinColumn(name = "fk_category_colour_id") specifies that the column "fk_category_colour_id" in the main table is used as the primary key join column.
 * So, when the entity is fetched or persisted, the corresponding columns from the secondary table will be included and mapped to the entity's fields or properties.
 */
@SecondaryTable(name = "colours", pkJoinColumns = @PrimaryKeyJoinColumn(name = "fk_category_colour_id"))
@SecondaryTable(name = "users", pkJoinColumns = @PrimaryKeyJoinColumn(name = "fk_user_id"))
public class Category {
    /*
     * <i>@Id is an annotation used to mark a field or property in an entity class as the primary key of the corresponding table in the database.</i>
     * <br>
     * <i>@GeneratedValue is an annotation used to specify the generation strategy for the values of the annotated field.
     * In this example, 'GenerationType.IDENTITY' is used, which indicates that the primary key values are automatically generated by the database. With this strategy, the database assigns unique identifier values to the corresponding field when a new row is inserted into the table.</i>
     * <br>
     * <i>@Column is an annotation used to specify the details of the column associated with the annotated field in the database table.
     * The 'name' attribute specifies the name of the column in the database that corresponds to the annotated field.</i>
     */
    /**
     * The unique identifier for this Category.
     * It is generated automatically by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "pk_category_id")
    private int categoryId;

    /** The name of the category. */
    @Column(name = "category_name")
    private String categoryName;

    /** The description of the category. */
    @Column(name = "category_description")
    private String categoryDescription;

    /*
     * <i>@ManyToOne is an annotation used to define a many-to-one relationship between two entities. It indicates that the annotated entity (or entity field) has a many-to-one association with another entity.</i>
     * <br>
     * <i>@JoinColumn is an annotation used to specify the details of the join column associated with the annotated field.
     * The 'name' attribute within this annotation specifies the name of the join column in the database that corresponds to the annotated field.
     * The 'table' attribute is to state the name of the referenced table, ensuring that the relationship is established correctly between the entities.</i>
     * <br>
     * <i>By using these annotations together, you are defining a many-to-one relationship between the entity that contains these annotations and the Label entity.
     * The @JoinColumn annotation configures the join column that establishes the association, including the column name in the current entity's table, the column name in the referenced table, and the name of the referenced table itself.</i>
     * <br>
     * <i>There is an attribute with the name 'foreignKey' but I do not think that it is necessary.</i>
     */
    /**
     * The colour associated with the category.
     * Represents a many-to-one relationship between Category and Colour.
     * The 'insertable' and 'updatable' attributes are set to false to prevent modifications on the relationship directly from this entity.
     */
    @ManyToOne
    @JoinColumn(name = "fk_category_colour_id", referencedColumnName = "pk_colour_id", table = "colours", insertable=false, updatable=false)
    private Colour categoryColour;

    /** The ID of the colour associated with the category. */
    @Column(name = "fk_category_colour_id")
    private int categoryColourId;

    /**
     * The user associated with the category.
     * Represents a many-to-one relationship between Category and User.
     * The 'insertable' and 'updatable' attributes are set to false to prevent modifications on the relationship directly from this entity.
     */
    @ManyToOne
    @JoinColumn(name = "fk_user_id", referencedColumnName = "pk_user_id", table = "users", insertable=false, updatable=false)
    private User categoryUser;

    /** The ID of the user associated with the category. */
    @Column
    private int categoryUserId;

    /*
     * <i>@OneToMany is an annotation indicates a one-to-many relationship between the entities. It is used to define a relationship where the annotated entity has a collection of instances of another entity.
     * The mappedBy (Java) attribute is used to specify the field or property in the target entity that owns the relationship.
     * cascade is an attribute to specify the behaviour for the relationship. The 'CascadeType.ALL' option indicates all operations (such as persisting, merging, removing, refreshing) performed on the owning entity will be cascaded to the associated entities. In this case, any operation performed on the entity containing this annotation will also affect the associated entities.</i>
     */
    /**
     * The subcategories associated with the category.
     * Represents a one-to-many relationship between Category and Subcategory.
     * The 'mappedBy' attribute is used to specify the field in the Subcategory class that owns the relationship.
     * The 'cascade' attribute specifies that any operations performed on the entity containing this annotation will also affect the associated subcategories (e.g., persisting, merging, removing, refreshing).
     */
    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL)
    private List<Subcategory> subcategories;

    /** Default constructor. */
    public Category() {

    }

    /**
     * Parameterized constructor.
     *
     * @param categoryId         The unique identifier for this category.
     * @param categoryName       The name of the category.
     * @param categoryDescription The description of the category.
     * @param categoryColourId   The ID of the associated color.
     * @param categoryUserId     The ID of the associated user.
     */
    public Category(int categoryId, String categoryName, String categoryDescription, int categoryColourId, int categoryUserId) {
        this.categoryId = categoryId;
        this.categoryName = categoryName;
        this.categoryDescription = categoryDescription;
        this.categoryColourId = categoryColourId;
        this.categoryUserId = categoryUserId;
    }

    /**
     * Returns the unique identifier of this category.
     *
     * @return The category ID.
     */
    public int getCategoryId() {
        return categoryId;
    }

    /**
     * Returns the name of this category.
     *
     * @return The category name.
     */
    public String getCategoryName() {
        return categoryName;
    }

    /**
     * Returns the description of this category.
     *
     * @return The category description.
     */
    public String getCategoryDescription() {
        return categoryDescription;
    }

    /**
     * Returns the ID of the associated color.
     *
     * @return The category color ID.
     */
    public int getCategoryColourId() {
        return categoryColourId;
    }

    /**
     * Returns the ID of the user associated with this category.
     *
     * @return The ID of the associated user.
     */
    public int getCategoryUserId() {
        return categoryUserId;
    }
}